pipeline {
  agent any
  environment {
      DOCKER_PASSWORD = credentials("docker_password")
      GITHUB_TOKEN = credentials("github_token")
  }

  stages {
    stage('Build & Test') {
      steps {
        sh './gradlew clean build'
      }
    }
    stage('Tag image') {
      steps {
        script {
          sh([script: 'git fetch --tag', returnStdout: true, trim: true])
          env.MAJOR_VERSION = sh([script: 'git tag | sort --version-sort | tail -1 | cut -d . -f 1', returnStdout: true]).trim()
          env.MINOR_VERSION = sh([script: 'git tag | sort --version-sort | tail -1 | cut -d . -f 2', returnStdout: true]).trim()
          env.PATCH_VERSION = sh([script: 'git tag | sort --version-sort | tail -1 | cut -d . -f 3', returnStdout: true]).trim()
          env.IMAGE_TAG = "${env.MAJOR_VERSION}.\$((${env.MINOR_VERSION} + 1)).${env.PATCH_VERSION}"
        }
        sh "docker login -u peproject -p $DOCKER_PASSWORD"
        sh "docker build -t peproject/pe_authz:latest ."
        sh "docker tag peproject/pe_authz:latest peproject/pe_authz:${env.IMAGE_TAG}"
        sh "docker push peproject/pe_authz:${env.IMAGE_TAG}"
        sh "git tag ${env.IMAGE_TAG}"
        sh "git push https://$GITHUB_TOKEN@github.com/prod-eng-unbounded/service.git ${env.IMAGE_TAG}"
      }
    }
    stage('Integration tests') {
      steps {
        sh "IMAGE_TAG=${env.IMAGE_TAG} docker compose up -d hello mongo"
      }
    }
    stage('End-to-end tests') {
      steps {
        sh "MONGODB_CONECTION_URL='mongodb://root:example@host.docker.internal:27017' ./gradlew testE2E"
      }
    }
  }
}